proposal/ timeline: https://docs.google.com/document/d/1PwHCOXRdCH0rVnoNvRV-OCeNM10QH6NhPCaf7pC7t-Q/edit?usp=sharing


Suki 4/16:
1) bug fixes
2) album.html
3) all_albums.html

Amy 4/16:
1) fixing heroku issue


Amy 4/12:
1) fixed zero bytes checker blocking aws
2) modularized file checker code -> now in s3.py
3) fixed display for all tags, image; now responsive and scalable for many tags
4) added generate pdf feature -- pdf needs to be aesthetically improved but otherwise it's there
   - looking to add csv export for all albums, but all albums not created yet

Suki 4/12:

- got primary training data
- made tags user-specific + more efficient
- case-insensentive for tags (search-wise: Tag = tag)
- albums case sensitive (if search tAg, get Tag and tag etc.)
- heroku
- incorporated custom tagger


** limitation: duplicate images

###############################################################################
Amy 4/11:
1) AWS fully integrated
2) Images now renderable on site -- though size adjustments still necessary (but some html will fix that)
###############################################################################

Suki 4/9:

1) search bar
2) single tag pg
3) all tags pg
4) image pg

################################################################################
Amy 04/3:
(update from before--forgot date)
1) wrote library to tag images in googleapi.py

(current update)
1) designed the interface
2) added templates and required css/js support files

################################################################################

Suki 3/31:
1) Upload multiple images to db with Tags

- does not accept pdf bc extra work to check if it is an image file
https://stackoverflow.com/questions/55704218/how-to-check-if-pdf-is-scanned-image-or-contains-text

- also does not accept raw input bc raw

file uploaded references:
https://www.javatpoint.com/flask-file-uploading
https://stackoverflow.com/questions/11817182/uploading-multiple-files-with-flask/52558445

2) 'UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY'
ranked 0 - 5
so each type of tag ranked differently

3) change album

################################################################################
Suki 3/15:

1) Database Schema:

Users > Albums > Images <-> Tags
                 Tag Type > Tags

User: netid, albums
Albums: album_id, name (of album), netid, images
Images: image_id, album_id, picture, tags
Tags: tag id, name (of tag, i.e. "happy"), tag type, confidence score, images
Tag_Types: name (of type, i.e. "sentiment"), tags
Image_Tags: tag_id, image_id

User - Albums (1 - many)
Albums - Images (1 - many)
Images - Tags (many - many)
    *** tags (i.e. happy 75% sentiment) can happen to multi. images
    *** multi. images have multi. tags
Tag Type - Tags (1 - many)

2) Images are stored as blobs (large binary object) -- notes after (3)

3) Search and sort by tags, functions in api.py to add to database, get tags
from images

(https://stackoverflow.com/questions/54500/storing-images-in-postgresql/10267699)
(https://stackoverflow.com/questions/31849494/serve-image-stored-in-sqlalchemy-largebinary-column)

Typically, files are stored in the filesystem and the path is stored in the
database. This is the better solution because the web server typically has an
efficient method of serving files from the filesystem, as opposed to the
application sending large blobs of data dynamically.

Why not use file system?
+ didn't want to use own disk storage (also not great for Heroku)
+ best to use aws but no $
+ also from some research:

When images are not the only data you store, don't store them on the file
system unless you absolutely have to. It's such a benefit to be always sure
about your data consistency, and to have the data "in one piece" (the DB).
BTW, PostgreSQL is great in preserving consistency.

blobs vs bytea

no problem with backing up blobs!

Blobs, in contrast, you can stream into stdout. That helps in reducing the
server memory footprint. Especially, when you store 4-6 MPix images.

bytea (BYTE Array): for caching thumbnail images. Cache the little images to
send it fast to the web-browser (to avoiding rendering problems) and reduce
server processing. --> decided not to bc we want orig image

################################################################################
Suki 2/28:

Corruption detection locally and setup for Google Cloud vision api (cloud_setup.txt).

corruption code
> https://opensource.com/article/17/2/python-tricks-artists

potential future references
> https://www.geeksforgeeks.org/python-uploading-images-in-django/
